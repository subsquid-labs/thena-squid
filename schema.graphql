type User @entity {
    id: ID!
    balance: BigInt!
    firstInteractAt: DateTime!
    trades: [Trade!]! @derivedFrom(field: "user")
}

type Trade @entity {
    id: ID!
    blockNumber: Int!
    timestamp: DateTime!
    txHash: String!
    user: User!
    tokenIn: String!
    amountIn: BigInt!
    tokenOut: String!
    amountOut: BigInt!
    routes: [String!]!
}

type Pool @entity {
    id: ID!
    factory: String!
    token0: String!
    token1: String!
    reserve0: BigInt!
    reserve1: BigInt!
    liquidity: BigInt!
    # minimumLiquidity: BigInt!
}

type LiquidityPosition @entity {
    id: ID!
    user: User!
    pool: Pool!
    value: BigInt!
    updates: [LiquidityPositionUpdate!]! @derivedFrom(field: "position")
}

type LiquidityPositionUpdate @entity {
    id: ID!
    blockNumber: Int!
    timestamp: DateTime!
    txHash: String!
    position: LiquidityPosition!
    amount: BigInt!
    amount0: BigInt!
    amount1: BigInt!
}

type Token @entity {
    id: ID!
    ethPrice: BigInt!
    metadata: TokenMetadata!
}

type TokenMetadata {
    recalculatedAt: DateTime!
    largestBnbReserve: BigInt!
}
