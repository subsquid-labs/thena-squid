type User @entity {
    id: ID!
    balance: BigInt!
    firstInteractAt: DateTime!

    isContract: Boolean! @index

    trades: [Trade!]! @derivedFrom(field: "user")
    liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
    veTokens: [VeToken!] @derivedFrom(field: "owner")
    stakes: [GaugeStake!]! @derivedFrom(field: "user")
    thenianNfts: [ThenianNft!] @derivedFrom(field: "owner")
    tradingCompetitions: [TradingCompetition!] @derivedFrom(field: "owner")
    joinedTCs: [TCParticipant!] @derivedFrom(field: "participant")
    usernameNfts: [UsernameNft!] @derivedFrom(field: "owner")
}

type Trade @entity {
    id: ID!

    # meatadata
    blockNumber: Int! @index
    timestamp: DateTime! @index
    txHash: String!

    user: User!

    # in
    tokenIn: Token!
    amountIn: BigInt!
    amountInUSD: Float!

    # out
    tokenOut: Token!
    amountOut: BigInt!
    amountOutUSD: Float!

    amountUSD: Float!

    routes: [String!]!
}

enum PoolType {
    Solidly
    Algebra
    Hypervisor
}

type Pool @entity {
    id: ID!

    type: PoolType!
    factory: String

    # token0
    token0: Token!
    reserve0: BigInt!
    price0: BigInt

    # token1
    token1: Token!
    reserve1: BigInt!
    price1: BigInt

    liquidity: BigInt!
    stable: Boolean
    sqrtPriceX96: BigInt

    gauge: [Gauge!]! @derivedFrom(field: "pool")
    bribes: [Bribe!]! @derivedFrom(field: "pool")

    liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "pool")
}

type LiquidityPosition @entity {
    id: ID!

    user: User!
    pool: Pool!

    value: BigInt!

    updates: [LiquidityPositionUpdate!]! @derivedFrom(field: "position")
}

type LiquidityPositionUpdate @entity {
    id: ID!

    blockNumber: Int!
    timestamp: DateTime!
    txHash: String!

    position: LiquidityPosition!

    amount: BigInt!

    amount0: BigInt!
    amount1: BigInt!
}

type Token @entity {
    id: ID!
    decimals: Int!
    symbol: String!
    bnbPrice: BigInt!
    priceMetadata: TokenPriceMetadata!
}

type TokenPriceMetadata {
    recalculatedAt: DateTime!
    largestBnbReserve: BigInt!
}

type Hypervisor @entity {
    id: ID!

    pool: Pool!

    basePosition: LiquidityPosition
    limitPosition: LiquidityPosition
}

type Bribe @entity {
    id: ID!
    pool: Pool
}

type Gauge @entity {
    id: ID!

    pool: Pool
    totalSupply: BigInt!

    externalBribe: Bribe!
    internalBribe: Bribe!

    isAlive: Boolean!

    stakes: [GaugeStake!]! @derivedFrom(field: "gauge")
}

type GaugeStake @entity {
    id: ID!

    gauge: Gauge!
    user: User!

    value: BigInt!
    totalReward: BigInt!
}

type Vote @entity {
    id: ID!

    token: VeToken!
    pool: Pool!

    weight: BigInt!
}

type VeToken @entity {
    id: ID!

    owner: User!

    value: BigInt!
    lockedUntil: DateTime!

    totalReward: BigInt!

    votes: [Vote!]! @derivedFrom(field: "token")
}

type Attribute {
    traitType: String!
    value: String!
}

type ThenianNft @entity {
    id: ID!

    index: BigInt!
    timestamp: BigInt!
    meatadata: ThenianNftMetadata

    owner: User!
}

type ThenianNftMetadata {
    image: String!
    attributes: [Attribute!]!
}

type TimestampInfo {
    startTimestamp: BigInt!
    endTimestamp: BigInt!
    registrationStart: BigInt!
    registrationEnd: BigInt!
}

type CompetitionRules {
    startingBalance: BigInt!
    winningToken: String!    
    tradingTokens: [String!]!
    winningTokenDecimal: Int!
}

enum MarketType {
    SPOT
    PERPETUALS
}

type Prize {
    winType: Boolean!
    weights: [BigInt!]!
    totalPrize: BigInt!
    ownerFee: BigInt!
    token: String!
    hostContribution: BigInt!
}

type TradingCompetition @entity {
    id: ID!

    entryFee: BigInt!
    maxParticipants: BigInt!

    owner: User!
    tradingCompetitionSpot: String!

    name: String!
    description: String!

    timestamp: TimestampInfo!
    market: MarketType!
    prize: Prize!
    competitionRules: CompetitionRules!

    participants: [TCParticipant!] @derivedFrom(field: "tradingCompetition")
    participantCount: Int!
}

type TCParticipant @entity {
    id: ID!
    tradingCompetition: TradingCompetition!
    participant: User!
    startBalance: BigInt!
    winAmount: BigInt!
    winTokenPriceInUSD: Float!
    winTokenDecimal: Int!
    pnl: BigInt!
}

type UsernameNft @entity {
    id: ID!

    index: BigInt!
    name: String!
    timestamp: DateTime!

    owner: User!
}